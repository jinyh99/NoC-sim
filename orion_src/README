################################################################################
##### README file for Polaris                                              #####
##### Noel Eisley                                                          #####
##### 2006                                                                 #####
##### Princeton University                                                 #####
################################################################################

Table of Contents:
A. Notes 
B. Compiling Polaris
1. Usage
  1a. Trace file naming convention
2. Input File Format
3. Class (Code) Structure
  3a. Adding a new topology
  3b. Using different architectural models
  3c. Varying architectural parameters
  3d. General comments
4. Todos
5. Known Bugs
6. Contact

A. Notes

Currenly Polaris assumes packets that are composed of 5 64-bit flits each.
It supports 90nm and 50nm technologies.

B. Compiling Polaris

To compile Polaris just type "make" in the directory where polaris resides.

example:

./make

This uses the Makefile in Polaris's directory and automatially compiles the
simulator.

1. Usage

  polaris -f [trace file] -s [segment length] -t [total time]

  Input parameters:
  
  -f [trace file]: Trace file is the name (including path, if applicable) of
the trace file to be used.  Currently there is one trace file per run of
Polaris, but this may be updated in the future.

  -s [segment length]: Segment length is the size of the epochs, in cycles.
This is the temporal granularity of the analysis.  Note that the larger the
segment length, the less accurate the latency calculation will be (it will
be underestimated).  The smaller the segment length, the longer the
LUNA component will take to run.  Default value is 500 cycles.

  -t [total time]: Total time is the total analysis time, in cycles.  This
is used if the trace file is longer than desired.  If the -t option is
omitted, then the analysis is run for the entire length of the trace file.  

  Example usage: 

    ./polaris -f traces/mytrace.trc -t 100000 -s 1000

1a. Trace File Naming Convention

   The name of each trace files determines the network topology type, e.g. 
if it is a mesh/torus/tree/ring, etc., and its variant, e.g. plain, express-
cube, hierarchical, etc., the express interval (if its variant is express-
cube or hierarchical), the number of nodes, and the value of the H, p, and 
sigma 3-tuple parameters.  An explanation of the (H, p, sigma) statistical 
3-tuple can be found in the paper "A Statistical Traffic Model for on-Chip
Interconnection Networks" by Soteriou, Wang, and Peh that is published in 
the Proceedings of the 2006 Conference on Measurement and Simulation of 
Computer and Telecommunication Systems (MASCOTS'06).

   Note that in the current version of Polaris only square of cube network 
configurations for 2D and 3D topologies can be used.  In other terms the 
number of rows and columns for 2D topologies and the length, depth and 
breadth for 3D topologies must contain the same number of nodes along each 
dimension.  Also the number of flits per packet can be given in the input 
file with an extra number of columns to the left of the file (in integer 
numbers greater or equal to 1); if this number is missing (as in the 
explanation above) then Polaris assumes packets containing 5 flits each 
(this can be changed by the user and in the future it will be given as an 
input at Polaris's command line).  

   The general trace file name format is as follows:

      T[x1]V[x2]a[x3]v[x4]p[x5]H[x6]s[x7]

where x1 is enumerated as {1=ring, 2=mesh, 3=torus, 4=binary tree}.  If the 
user defines another topology by expanding the code in Polaris, e.g. a 
hypercube, then the number should be incremented with every new topology 
type, i.e. 5, 6, etc.  "V" stands for the topology variant and is enumerated 
as {1=plain, 2=3D, 3=express-cube, 4=hierarchical}.  Again the user can add 
more variants to the Polaris code.  Binary trees can only be plain.  If 
x1=2 or 3 and x2=1 or 3 or 4 this designates a 2D mesh or torus with either 
plain (no express-cube or hierarchical) or express-cube or hierarchical 
configuration.  "a" designates the total number of nodes in the network and 
it is an integer number greater than 1.  For example, x3=64 for a 2D mesh 
network will designate an 8-by-8 array; please read current restrictions 
in the number of nodes currently in Polaris.  "v" stands for the express 
interval.  It is applicable for express-cube and hierarchical topology 
variants, i.e. when x2=3 or x2=4 where this value must be x4>=1.  For plain 
and tree topologies (no 3D express-cube and hierarchical topologies currently 
supported) this value should be x4=0.  "p" is the p-parameter.  It defines 
the traffic's hop distribution where 0<=x5<=1.0.  This value is topology-
dependent.  "H" is the Hurst exponent value where 0.5<x6<=1.0 which defines the 
level of the traffic's self-similarity and the level of scale-invariant 
burstiness.  "s" is the sigma parameter.  It defines the injection 
distribution and it has a normalized value, where 0<x7<=1.0.  

   Example:

      T3V1a64v0p0.0196H0.65s0.05

defines a 2D plain torus topology with 64 nodes (8-by-8 matrix) with no express 
interval (since it is plain, with a statistical 3-tuple of [H=0.65, p=0.0196, 
s=0.05]).  

2. Input File Format

   The input file (also called the trace file) format is straight-forward.
Each line of the file represents a single packet injected into the network.
The format for each line is as follows:

    <time> <src_x> [src_y] [src_z] <dest_x> [dest_y] [dest_z] [num_flits]

where time is the time (cycle number) that the packet is "injected" into the
network and need not be an integer value.  Src_{x,y,z} and dest_{x,y,z} are
the coordinates of the source and destination routers, respectively.
Num_flits is the number of flits that the current packet contains.  Values
in angled brackets (<,>) are mandatory, while those in regular brackets
([,]) are optional.  However, if src_y is specified, then dest_y must also
be specified, and the same is true for the z coordinate.  Note that whether
the y and z coordinates are specified also depends on the target topology
(i.e. whether it is a ring, 2D mesh, or 3D torus, for example).  If
num_flits is not specified, the default value (either globally defined or
passed as a command-line parameter) is used.  

   An example entry is shown below:

    45 3 5 0 2 5

This line specifies that a packet of five flits is injected into the network
at node (3,5) whose destination is node (0,2).  

3. Class (Code) Structure

   This section serves to describe the structure of the source code in some
detail.  Further detail is included in comments distributed throughout the
code itself. 

   Polaris consists of three groups of files.  At the bottom level is a
separate .h and .cpp file for each topology.  Each of these files houses a
single class derived from polaris_topology in polaris_topology.h.  The
hierarchy of the classes (that is, the inherited nature of the subclasses)
is not critical to the efficiency of the code, but rather serves as a
logical aid to understanding the structure of the classes and to adding
additional supported topologies.  At the top class level is polaris.h and 
polaris.cpp.  A single instance of class polaris serves as the object
which will run the analysis.  At the highest level is polarismain.cpp.
This file houses the main() function which takes the command line parameters
and instantiates the polaris object and calls the method to run the
analysis.  

  Each topology class has the following methods: gen_msgs(), gen_input(),
gen_topology(), gen_paths(), route(), and calc_power().  Each also has the
following fields: the_acts_, cur_flits_, and the_paths_.  

  Gen_msgs(), gen_topology(), gen_paths(), and route() all help to generate
the LUNA input file.  Gen_msgs() generates the MESSAGES section of
the input file by parsing the trace file and calculating the message
injection rate functions for each source-destination pair at the specified
temporal granularity.  Gen_topology() generates the NETWORK and LINKS
section of the input file.  Gen_paths() generates the PATHS section of the
input file, using route() to actually calculate the path(s) that each
source-destination pair will route through given the topology.  

  Calc_power() estimates the average power consumption of the entire NoC
(routers plus links) from the power profiles estimated by LUNA.
The average router activities are estimated by averaging the average input
and output link utilizations for all ports of the router.  This average
activity is then multiplied by the maximum power consumption as estimated by
Orion (note that Orion assumes 50% switching in its power estimations).
Similarly, each link utilization is multiplied by the estimated power
consumption (again from Orion) based on the width of the links and the
estimated length.  While currently average power consumption is estimated,
it is possible to also perform some temporal analysis, since the utilization
profiles of LUNA have a temporal resolution as specified by the
given segment (or epoch) length.  

  The_acts_ is a vector which holds the injection rate (activity) functions
for each message (source-destination pair).  Cur_flits_ is a temporary
counter used during the trace file parsing to tally the number of flits
injected for each message for each epoch.  The_paths_ is a vector of
vectors; each element of the top-level vector corresponds to a single
message (source-destination pair), and each of the elements of a low-level
vector is a unique path from the given source to the given destination.
The first such path for each message is the default minimal x-y routing
path. Note that the original Princeton version of Polaris used multiple
paths to model adaptive routing, but this is not yet incorporated into this
version.  This is because there is some debate as to how the adaptive
modeling should be modeled (i.e. perhaps it should be handled in
LUNA).  

3a. Adding a New Topology

  To add a new topology, two new files must be created: a *.h and a *.cpp
file.  The Polaris Makefile must be modified to tell gcc to create the
corresponding *.o file (i.e. the *.cpp file must be listed in
EXE_CPP_SRCS).  The *.h file must be #included in polaris.cpp.  The name is
arbitrary, but all of the topology files are currently of the format
p_[topology]_[variant], where [topology] is mesh, torus, ring, etc., and
[variant] is plain, hier, exp, etc. 

  The *.h file should be the same as all other topology *.h files (hence the
methods could be specified in the top-level class, but it is a small
matter).  For the *.cpp file, the following methods must be changed in all
cases: gen_topology(), route(), and calc_power().  Additionally, gen_msgs()
should be modified according to the format of the trace file.  For example,
a trace file for a 2D mesh or variant will specify four coordinates: source
x, source y, dest x, and dest y.  However, a trace file for a 3D topology
will specify six coordinates: source x, y, z, and destination x, y, z.
Therefore, the gen_msgs() method must read in the correct number of
variables per packet injection.  

  The modification of gen_topology() is fairly straightforward.  Each link
must be generated.  The order in which the links are specified in the
LUNA input file is not relevant, although for all of the topology
files incorporated so far, the local (1-hop) links are listed first, then
the express links; within each category, the links are listed in order of
the node from which they originate (i.e. all links from node 0, then all
links from node 1, and so on).

  Modification of route() is more complicated.  Route() is responsible for
generating the path(s) between a given source-destination pair
(i.e. generating the vector of paths, which is itself an entry in the
higher-level vector the_paths_).  As an exmple, consider the following 2x2
network:

                      0--1
                      |  |
                      2--3

Assume the source node is 0 and the destination is 3 (also note that the
"links" in the above depiction actually represent two separate links in
opposing directions).  There are two minimal paths from node 0 to node 3:
0->1->3 and 0->2->3.  Thus, the entry for this source-destination pair of
the_paths_ would be [[0 1 3] [0 2 3]].  If only deterministic routing is
considered (as is currently the case), then the entry would be [[0 1 3]].  

  To calculate the paths for a new topology, use the algorithms from
existing topologies as a guide.  In general, mesh architectures are simpler
than tori because in the latter case, first the direction of travel has to
be determined in each dimension (i.e. the minimum rectangle has to be
determined) before the paths can be calculated.  Heterogenous topologies
(not supported yet) may need to implement some algorithms from graph theory
in order to discover one or all of the minimum paths.  

  Modification of calc_power() is also relatively straight-forward.  The
energy costs are estimated by the polaris.cpp methods orion_rtr_power() and
orion_link_power().  The changes which need to be made depend on the type of
the network.  If all routers have the same number of ports and all links are
the same length, then no changes need to be made (as compared to
p_mesh.cpp).  However, if there is more than one type of router (e.g. in an
express-cube topology where some nodes have 5 ports and express nodes have 9
ports), then orion_rtr_power() should be called with different values of
n_port (see p_exp_mesh.cpp for an example).  Similarly, see p_exp_mesh.cpp
for an example of handling links of different length.  

  After the new *.h and *.cpp files have been created, polaris.cpp must be
modified to include them.  The *.h file must be #included at the top of
polaris.cpp.  Next, a method of the form run_[topology] (e.g. run_mesh())
needs to be added.  This is as simple as copying an existing
run_[topology]() method, renaming it, and renaming the p_[topology] class
specifications within (as well as modifying the text output to reflect the
different topology).  Of course this method must be declared in polaris.h.
Note that adding a new topology may also require extending the current
topology encoding scheme for trace file names (i.e. modification of the
enumerations at the top of polaris.h).  This will require modification of
polaris::run(), top_type_decode(), and top_var_decode(), which is
straight-forward.  



4. Todos

  -Move set_port() into orion_rtr_power()

5. Known bugs

  -The trace file name parsing (polaris::parse_name()) is not robust.
Some filenames (if the full path is included) may not be correctly parsed.  
This will result in non-operation, rather than incorrect operation.  

6. Contact

  For questions, contact me at eisley@princeton.edu
